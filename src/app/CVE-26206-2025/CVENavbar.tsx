"use client";

import React, { useRef, useState } from "react";
import Link from "next/link";

const navLinks = [
  { name: "Home", href: "/" }
];

export default function CVENavbar() {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [progress, setProgress] = useState(0); // 0 -> no shrink, 1 -> fully shrunk
  const toggleMobileMenu = () => setIsMobileMenuOpen((v) => !v);

  const ticking = useRef(false);
  const [solid, setSolid] = useState(true);
  React.useEffect(() => {
    const measure = () => {
      const toc = document.getElementById('cve-toc');
      const back = document.getElementById('cve-back');
      if (!toc) return;
      const rect = toc.getBoundingClientRect();
      // Start easing when the TOC is within 120px of the top, end by 72px
      const start = 120;
      const end = 72;
      const raw = (start - rect.top) / (start - end);
      const clamped = Math.max(0, Math.min(1, raw));
      // Smoothstep easing
      const eased = clamped * clamped * (3 - 2 * clamped);
      setProgress(eased);

      if (back) {
        const b = back.getBoundingClientRect();
        setSolid(!(b.top <= 80)); // once navbar reaches back button zone, drop AMOLED
      }
    };
    const onScrollOrResize = () => {
      if (ticking.current) return;
      ticking.current = true;
      requestAnimationFrame(() => {
        measure();
        ticking.current = false;
      });
    };
    measure();
    window.addEventListener('scroll', onScrollOrResize, { passive: true });
    window.addEventListener('resize', onScrollOrResize);
    return () => {
      window.removeEventListener('scroll', onScrollOrResize);
      window.removeEventListener('resize', onScrollOrResize);
    };
  }, []);

  return (
    <div className="fixed top-0 left-0 right-0 z-[100] flex justify-center items-center px-4 md:px-24 py-4">
      <nav
        className={`flex rounded-full ${solid ? 'bg-background' : 'bg-white/10'} backdrop-blur-md w-full max-w-5xl items-center justify-between transition-[transform,max-width,height,padding] duration-1000 ease-[cubic-bezier(0.25,0.1,0.25,1)] will-change-transform`}
        style={{
          height: `${56 - (56 - 50) * progress}px`,
          paddingLeft: `${18 + (24 - 18) * (1 - progress)}px`,
          paddingRight: `${18 + (24 - 18) * (1 - progress)}px`,
          transform: `scale(${1 - 0.015 * progress})`,
          maxWidth: `${896 - (896 - 700) * progress}px`,
        }}
      >
        <Link className="w-max flex-shrink-0 flex items-center gap-2" href="/CVE-26206-2025">
          <span className="text-lg md:text-xl text-white">Blog</span>
        </Link>

        <div className="hidden md:flex gap-6" style={{ opacity: 1 }}>
          {navLinks.map((link) => (
            <a key={link.href} href={link.href} className="text-sm transition-opacity duration-200 hover:opacity-100 opacity-70 whitespace-nowrap">
              {link.name}
            </a>
          ))}
        </div>

        <button
          className="md:hidden flex items-center justify-center w-8 h-8 rounded-full bg-white/10 backdrop-blur-md transition-all duration-300"
          onClick={toggleMobileMenu}
          aria-label="Toggle mobile menu"
        >
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" className={`text-white transition-transform duration-300 ${isMobileMenuOpen ? "rotate-45" : "rotate-0"}`}>
            <path d="M10 3V17M3 10H17" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
          </svg>
        </button>
      </nav>

      {isMobileMenuOpen && (
        <div className="md:hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-40" onClick={toggleMobileMenu} />
      )}

      <div
        className={`md:hidden fixed top-20 right-4 left-4 bg-white/10 backdrop-blur-md rounded-2xl z-50 transition-all duration-300 ${
          isMobileMenuOpen ? "opacity-100 translate-y-0 visible" : "opacity-0 -translate-y-4 invisible"
        }`}
      >
        <div className="p-6 space-y-3">
          {navLinks.map((link) => (
            <a key={link.href} href={link.href} className="block text-white text-base font-medium" onClick={toggleMobileMenu}>
              {link.name}
            </a>
          ))}
          <div className="pt-2 flex items-center gap-4">
          </div>
        </div>
      </div>
    </div>
  );
}


